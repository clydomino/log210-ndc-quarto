---
bibliography: references.bib
---

# Analyse et conception de logiciels

Ce manuel a été créé dans un contexte de cours d'ingénieur logiciel (LOG210 à l'École de technologie supérieure à Montréal).
Il s'agit d'une approche où la communauté étudiante apprend à programmer d'abord ("CS-first" selon @SE_Curriculum_ACM_2014).
Ainsi, le contenu est organisé pour les personnes ayant déjà une expérience en:

- programmation dans un langage orienté objet (Java, C#, TypeScript, etc.);
- application des patrons de conception de la "bande des quatre" (Gang of Four) : Gamma, Helm, Johnson et Vlissides @GoF1994.

La notation UML (*Unified Modeling Language*) est utilisée partout dans ce manuel.
Nous faisons une hypothèse que les personnes suivant ce manuel aient déjà vu cette notation avant, mais la familiarité avec UML n'est pas un préalable.

<!-- Voici le descriptif du cours, selon le plan de cours:

::: {.callout-important icon="false" appearance="simple"}
À la suite de ce cours, l'étudiant sera en mesure:

- de maîtriser et appliquer des patrons de conception logicielle;
- de concevoir un logiciel orienté objet en appliquant un ensemble de principes et des méthodes heuristiques de génie logiciel;
- de réaliser un logiciel en suivant un processus itératif et évolutif incluant les activités d'analyse et de conception par objets.

Méthodes et techniques de modélisation orientés objet, langage de modélisation, cas d'utilisation, analyse orientée objet, modèle du domaine, conception et programmation orientées objet, principes GRASP, patrons de conception, processus itératif et évolutif.

Séances de laboratoire axées sur l'application des notions d'analyse, de conception et de programmation orientées objet vues en classe. Mise en œuvre d'un modèle d'objet à partir d'une spécification de logiciel et à l'aide d'un langage orienté objet contemporain. Conception d'applications utilisant les outils UML ainsi que des techniques et des outils utiles au génie logiciel, tels qu'un environnement de développement intégré, la compilation automatique et les tests automatiques.
::: -->

## Livre complémentaire

Ce manuel suit la méthodologie d'analyse et de conception proposée par Craig Larman dans son livre "UML 2 et les Design Patterns" @craig_uml_2005.
Le livre est encore populaire et pertinent, mais malheureusement il n'a pas été actualisé depuis sa 3^e^ édition (2005).
La traduction française du livre n'est plus en stocke au Québec depuis plusieurs années.
Beaucoup de choses ont évolué depuis bientôt deux siècles!

Au besoin, des références à ce livre sont indiquées par l'icône du livre \faBook<i class="fa-solid fa-book"></i>.
Puisque ce livre-là est disponible en français et en anglais et les numéros de chapitres ne sont pas toujours les mêmes, nous indiquons la référence avec **F** et **A** pour la langue.
Par exemple, **F16.10/A17.10** indique la section **16.10 du livre en français** et la section **17.10 du livre en anglais.**
Toutes les références sont données pour la 3^e^ édition du livre.
Si vous avez une autre édition, les chapitres ne sont pas toujours les mêmes et vous devez chercher le sujet dans la table des matières.

Vous trouverez également d'autres sujets importants pour un ingénieur: les notions de complexité, le contexte industriel qui affecte les décisions de conception, l'impact de la conception sur d'autres qualités d'un logiciel, le travail en équipe, etc.

## Analyse vs Conception

L'**analyse** met l'accent sur une investigation du problème et des besoins plutôt que sur la recherche d'une solution.

La **conception** sous-entend l'élaboration d'une solution conceptuelle répondant aux besoins plutôt que la mise en œuvre de cette solution.

<!-- Pour plus de détails, vous pouvez consulter le chapitre 1 \faBook<i class="fa-solid fa-book"></i>. -->

```{.plantuml #fig-mddDes caption="Diagramme de *classes conceptuelles* décrivant le *problème* d'un jeu de dés [adapté du Jeu de dés de @craig_uml_2005, chap. 1]. Ceci est élaboré lors d'une activité d'analyse."}
@startuml
!include ecriture.pumlinclude
'left to right direction
hide empty members
class Joueur {
  nom : String
  nbLancers : int
  nbLancersGagnés : int
}
class Dé {
  face : int
}
class JeuDeDés

JeuDeDés "1" -- "2" Dé : inclut > 
Joueur "*" -l- "1" JeuDeDés : joue > 
@enduml
```

```{.plantuml #fig-ddcDes caption="Diagramme de *classes logicielles* décrivant une *solution* au problème du jeu de dés. La conception s'inspire du modèle du problème, afin de faciliter sa compréhension."}
@startuml
!include ecriture.pumlinclude
'left to right direction
hide empty methods
class Dé {
    +face : int
    brasser()
}
class JeuDeDés {
    '-joueurs: Map<string, Joueur>;
    ' -d1 : De;
    ' -d2 : De;

    getJoueurs()
    demarrerJeu(nom: string)
    jouer(nom: string)
    terminerJeu(nom: string)
}
class Joueur {
    +nom : string
    +nbLancers : number
    +nbLancersGagnés : number
}
JeuDeDés --> "d1" Dé
JeuDeDés --> "d2" Dé
JeuDeDés -r- "[nom]" Joueur : "        "
@enduml
```

Imaginez un jeu qui est joué dans la vraie vie avec deux dés à six faces.
Ensuite, on veut construire un logiciel pour ce jeu et donc on peut spécifier la règle du jeu, dont un de nombreux besoins est de générer un nombre aléatoire entre 1 et 6 (comme un dé à six faces).
On peut aussi modéliser ce besoin (un élément du problème) par une classe conceptuelle `Dé` ayant un attribut `face` dont sa valeur est un type `int`.
Les personnes travaillant sur un projet vont facilement comprendre ce modèle, car les gens comprennent les objets qui représentent des aspects de la vraie vie.

Dans l'approche proposée par ce manuel une modélisation orientée objet est utilisée et pour l'analyse (classes conceptuelles décrivant le problème et les besoins comme à la @fig-mddDes) et pour la conception (classes logicielles proposant une solution dont sa représentation est proche de la modélisation du problème comme à la @fig-ddcDes).

## Décalage des représentations {#sec-DecalageRepresentations}

Vous avez sûrement remarqué que le modèle du problème (@fig-mddDes) ressemble beaucoup au modèle de la solution (@fig-ddcDes) pour notre exemple de jeu de dés.
Cependant, il y a des différences, car une solution comporte des détails sur la dynamique du jeu qui sera codée.
Le modèle du problème et le modèle de la solution ne sont pas identiques.

::: {.callout-tip appearance="simple"}
Imaginez une autre solution n'ayant qu'une seule classe `Jeu` contenant toute la logique du jeu.
Avez-vous déjà codé une solution simple comme ça?
C'est un bon design au départ, car c'est simple.
Mais au fur et à mesure que vous codez la logique du jeu, bien que ça fonctionne parfaitement, la classe `Jeu` grossit et devient difficile à comprendre.
<!-- Par exemple, on voit une méthode `brasser()` dans la classe `Dé` qui montre que ce sera la responsabilité de cette classe de changer sa valeur quand ça sera le bon moment. -->
:::

Une caractéristique souhaitable d'un design est qu'il soit facile à comprendre et à valider par rapport au problème qu'il est censé résoudre.
<!-- Dans un modèle d'analyse, on décompose le problème en concepts.
On comprend plus facilement les éléments dans ce modèle. -->
Plus une solution (conception) ressemble à une description (modèle d'analyse) du problème, plus elle est facile à comprendre et à valider.
La différence entre la représentation d'un problème et la représentation de sa solution s'appelle le *décalage des représentations*.
C'est un terme complexe pour un principe très intuitif.
Méfiez-vous des classes importantes dont leur nom est difficile à tracer au problème.
Elles vont rendre votre solution plus difficile à comprendre.
Pour des explications de Larman, lisez la section 9.3 \faBook<i class="fa-solid fa-book"></i>.

L'exemple du jeu est trivial, puisque le problème est relativement simple.
Réduire le décalage des représentations est un principe très important surtout lorsque le problème à résoudre est complexe.

## La complexité et ses sources

Un.e ingénieur.e logiciel est constamment dans une bataille avec un adversaire dont le nom est la complexité.
Mais qu'est-ce que la complexité? La @fig-complexity est une image de la complexité. Reconnaissez-vous le domaine d'où vient cette image?

Voici une définition de la complexité:

> **Complexité**: Caractère de ce qui est complexe, difficile à comprendre, de ce qui contient plusieurs éléments.

![["Complexity"](https://www.flickr.com/photos/lytfyre/6489338411/) [(CC BY-SA 2.0)](https://creativecommons.org/licenses/by-sa/2.0/) par [lytfyre](https://www.flickr.com/people/lytfyre/).](images/flickr_lytfyre_complexity.jpg){width=80% #fig-complexity}

En voici quelques exemples en développement de logiciels:

- Un *problème* peut être complexe, par exemple le domaine des lois fiscales pour lequel des logiciels existent pour aider les gens à faire des déclarations de revenus.
- Un *projet logiciel* peut être complexe, avec plusieurs packages, chacun ayant beaucoup de classes, etc.
- Un cadre d'applications (cadriciel, *framework*) est toujours complexe.
Par exemple un framework comme Angular ou React pour développer un *front-end* (application frontale), car l'interaction entre l'utilisateur et une application (possiblement répartie dans le nuage) nécessite beaucoup de fonctionnalités supportées par le cadriciel.
- Un *algorithme* peut être complexe, par exemple, l'algorithme de [tri de Shell](https://fr.wikipedia.org/wiki/Tri_de_Shell) est plus complexe qu'un simple algorithme de [tri à bulles](https://fr.wikipedia.org/wiki/Tri_%C3%A0_bulles).
Notez que la complexité d'un algorithme peut parfois apporter des gains de performance, mais coder, déboguer et maintenir une implémentation d'un algorithme complexe sera plus coûteux.
- Un *patron de conception* peut être complexe, par exemple, les patrons Visiteur, Décorateur, Médiateur, etc.
Un patron définit des rôles et parfois des classes et du code supplémentaires à créer.
Le tout doit s'intégrer dans un design existant (qui est possiblement déjà complexe).
- Un *environnement* peut être complexe, par exemple les applications mobiles sont plus complexes à développer et à déboguer que les applications simples sur PC, à cause de l'environnement sans fil, des écrans tactiles, la pile limitée, etc.

La @fig-complexitySources présente les sources de complexité ainsi que leurs noms qu'on va utiliser dans ce manuel:

### Complexité inhérente (provenant du problème)

La complexité inhérente est au sein du problème que résout un logiciel.
Elle est souvent *visible* à l'utilisateur du logiciel.
Elle se compose des parties du logiciel qui sont nécessairement des problèmes difficiles.
N'importe quel logiciel qui tente de résoudre ces problèmes aura une manifestation de cette complexité dans son implémentation.
Exemple: un logiciel qui aide à faire des déclarations de revenus aura une complexité inhérente due à la complexité des lois fiscales qui spécifient comment doit être préparée une déclaration.

### Complexité circonstancielle (provenant des choix de conception) {#sec-ComplexiteCirc}

Les choix que font les ingénieur.e.s dans un projet peuvent amener de la complexité circonstancielle.
En tant qu'ingénieur.e.s, nous avons un devoir de contrôler cette forme de complexité, par exemple en prenant soin avec un choix de cadriciel Web ou d'architecture logicielle.
La complexité circonstancielle peut aussi être due à des contraintes imposées sur la conception, comme une utilisation obligatoire d'une vieille base de données ou d'une bibliothèque logicielle héritée, d'un langage de programmation, etc.
La complexité circonstancielle (aussi appelée accidentelle) peut être gérée avec des technologies, par exemple les débogueurs, les patrons de conception (un Adaptateur pour les bases de données différentes), etc.

### Complexité environnementale (provenant de l'environnement d'exécution)

Cette forme de complexité comprend des aspects d'une solution qui ne sont pas sous le contrôle des ingénieur.e.s.
Dans un environnement d'exécution, il y a des dimensions comme le ramasse-miettes (*garbage collection*), l'ordonnancement des fils d'exécution (*threads*) sur un serveur, l'utilisation de *containers* (à la Docker), etc. qui peuvent affecter la qualité d'un logiciel.
Les ingénieur.e.s doivent gérer ces formes de complexité, mais il n'y a pas beaucoup de stratégies évidentes face aux technologies qui évoluent très vite.

```{.plantuml #fig-complexitySources caption="Sources de complexité."}
@startuml
scale 0.8
skinparam style strictuml
skinparam backgroundColor transparent
skinparam packageBackgroundColor transparent
skinparam defaultFontName Arial 
skinparam defaultTextAlignment center
cloud "Domaine (du problème)" as P {
 cloud "Complexité\ninhérente" as PP #red {
 }
}
note right of PP: Exemple:\nLois fiscales (impôts)
rectangle "Spécification d'exigences" as S {
}
cloud "Conception logicielle" as C #lightgreen {
cloud "Complexité\ncirconstancielle" as CC #pink {
}
}
note right of CC: Exemples:\nFramework REST,\nutilisation du patron Visiteur,\nintégration avec un logiciel "ancien"
rectangle "Solution exécutable" as E {
cloud "Complexité\nenvironnementale" as EE #orange {
}
}
note left of EE: Exemples:\nApplication mobile,\ndéploiement dans conteneur Docker
P --> S 
S --> C
C --> E
@enduml
```

## Survol de la méthodologie

La @fig-SurvolMethodologie présente la méthode d'analyse et de conception proposée dans ce manuel.
C'est une adaptation de plusieurs figures présentées par @craig_uml_2005.

![Survol de la méthodologie.](images/FigA.1-avec-contrats.png){#fig-SurvolMethodologie}

## Développement itératif, évolutif et agile

Nous adaptons également un processus moderne de développement avec des itérations, selon une méthodologie "agile".
Dans le chapitre 2 du livre de Craig Larman, on définit le processus itératif et adaptatif ainsi que les concepts fondamentaux du "Processus Unifié", qui est une représentation générique de cette stratégie de développement.

Nous résumons les points importants ainsi:

- Le développement itératif et évolutif implique de programmer et de tester précocement un système partiel dans des cycles répétitifs.
- Un cycle est nommé une itération et dure un temps fixe (par exemple, trois semaines) comprenant les activités d'analyse, de conception, de programmation et de test, ainsi qu'une démonstration pour solliciter des rétroactions du client (voir la @fig-DevIteratifIncremental).
- La durée d'une itération est limitée dans le temps (*timeboxed* en anglais), de 2 à 6 semaines.
Il n'est pas permis d'ajouter du temps à la durée d'une itération si le projet avance plus lentement que prévu, car cela impliquerait un retard de la rétroaction du client.
Si le respect des délais semble compromis, on supprime plutôt des tâches ou des spécifications et on les reprend éventuellement dans une itération ultérieure.
- Les premières itérations peuvent sembler chaotiques, car elles sont loin de la "bonne voie".
Avec la rétroaction du client et l'adaptation, le système à développer converge vers une solution appropriée (voir la @fig-StabiliteDansLesIterations).
Cette instabilité peut être particulièrement prononcée dans un contexte d'entreprise en démarrage.
- Dans une itération, la modélisation (par exemple, avec l'UML) se fait au début et devrait prendre beaucoup moins de temps (quelques heures) que la programmation, qui n'est pas triviale (voir la @fig-AnalyseConceptionDansLesIterations). Selon le contexte du projet (voir le [Spectre de la conception](#sec-SpectreDeLaConception)), on peut décider de ne pas faire de la modélisation. Cependant, en fonction de la complexité du projet à réaliser, cela peut amener des risques, ce que l'on appelle la [dette technique](#sec-DetteTechnique).

Le développement itératif et incrémental amène plusieurs avantages selon @craig_uml_2005:

> - diminution d'échecs, une amélioration de la productivité et de la qualité;
>  - une gestion proactive des risques élevés (risques techniques, exigences, objectifs, convivialité, etc.);
>  - des progrès immédiatement visibles;
>  - la rétroaction, l'implication des utilisateurs et l'adaptation précoces;
>  - la complexité est gérée (restreinte à une itération);
>  - la possibilité d'exploiter méthodiquement les leçons tirées d'une itération.

![Le développement itératif et incrémental (Figure 2.1 du livre).](images/A2.1.svg){#fig-DevIteratifIncremental}

![Rétroaction et adaptation itératives convergent vers le système souhaité (Figure 2.2 du livre).](images/F2.2.svg){#fig-StabiliteDansLesIterations}

![Analyse et conception évolutives, majoritairement effectuées dans les premières itérations (Figure 2.4 du livre).](images/F2.4.svg){#fig-AnalyseConceptionDansLesIterations}

![Processus itératif et évolutif.](images/iteratif-evolutif.png){#fig-IteratifEvolutif}

![Nuage de mots importants.](images/wordle_ordre_alph.png){#fig-nuageDeMots}
